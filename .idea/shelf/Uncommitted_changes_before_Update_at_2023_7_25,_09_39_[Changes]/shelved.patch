Index: car2023-realtime/src/main/java/com/atguigu/dwd/Dwd_Malfunction_warn.java
===================================================================
diff --git a/car2023-realtime/src/main/java/com/atguigu/dwd/Dwd_Malfunction_warn.java b/car2023-realtime/src/main/java/com/atguigu/dwd/Dwd_Malfunction_warn.java
deleted file mode 100644
--- a/car2023-realtime/src/main/java/com/atguigu/dwd/Dwd_Malfunction_warn.java	(revision 9ac076f67d93b41d7bacb0e0ecb9a6b18a338ea8)
+++ /dev/null	(revision 9ac076f67d93b41d7bacb0e0ecb9a6b18a338ea8)
@@ -1,157 +0,0 @@
-package com.atguigu.dwd;
-
-import com.atguigu.gmall.realtime.app.BaseSQLApp;
-import com.atguigu.gmall.realtime.util.FlinkSinkUtil;
-import org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;
-import org.apache.flink.table.api.Table;
-import org.apache.flink.table.api.bridge.java.StreamTableEnvironment;
-
-public class Dwd_Malfunction_warn extends BaseSQLApp {
-
-    public static void main(String[] args) {
-        new Dwd_Malfunction_warn().start(
-                30002,
-                2,
-                "Dwd_Malfunction_warn"
-        );
-    }
-    @Override
-    protected void handle(StreamExecutionEnvironment env,
-                          StreamTableEnvironment tEnv) {
-
-        //1.读取ods_db
-        readOdsDb(tEnv);
-
-        //2.过滤出告警数据
-        Table carTable = tEnv.sqlQuery(
-                "select   " +
-                        "`vin` string ," +
-                        "`timestamp` big ," +
-                        "`car_status`  ," +
-                        "`execution_mode`  ," +
-                        "`velocity`   ," +
-                        "`mileage`  ," +
-                        "`voltage`  ," +
-                        "`electric_current`  ," +
-                        "`soc`  ," +
-                        "`dc_status  ," +
-                        "gear  ," +
-                        "insulation_resistance  ," +
-                        "motor_count  ," +
-                        "motor_list  " +
-                        "fuel_cell_voltage   ," +
-                        "fuel_cell_current   ," +
-                        "fuel_cell_consume_rate   ," +
-                        "fuel_cell_temperature_probe_count   ," +
-                        "fuel_cell_temperature   ," +
-                        "fuel_cell_max_temperature   ," +
-                        "fuel_cell_max_temperature_probe_id   ," +
-                        "fuel_cell_max_hydrogen_consistency   ," +
-                        "fuel_cell_max_hydrogen_consistency_probe_id   ," +
-                        "fuel_cell_max_hydrogen_pressure   ," +
-                        "fuel_cell_max_hydrogen_pressure_probe_id   ," +
-                        "fuel_cell_dc_status   ," +
-                        "engine_status   ," +
-                        "crankshaft_speed   ," +
-                        "fuel_consume_rate   ," +
-                        "alarm_level   ," +
-                        "alarm_sign   ," +
-                        "custom_battery_alarm_count   , " +
-                        "custom_battery_alarm_list  " +
-                        "custom_motor_alarm_count  ," +
-                        "custom_motor_alarm_list " +
-                        "custom_engine_alarm_count  ," +
-                        "custom_engine_alarm_list " +
-                        "other_alarm_count   ," +
-                        "other_alarm_list  " +
-                        "battery_count   ," +
-                        "battery_pack_count   ," +
-                        "battery_voltages  " +
-                        "battery_temperature_probe_count   ," +
-                        "battery_pack_temperature_count   ," +
-                        "battery_temperatures  " +
-                        "max_voltage_battery_pack_id   ," +
-                        "max_voltage_battery_id   ," +
-                        "max_voltage   ," +
-                        "min_voltage_battery_pack_id   ," +
-                        "min_voltage_battery_id   ," +
-                        "min_voltage   ," +
-                        "max_temperature_subsystem_id   ," +
-                        "max_temperature_probe_id   ," +
-                        "max_temperature   ," +
-                        "min_temperature_subsystem_id   ," +
-                        "min_temperature_probe_id   ," +
-                        "min_temperature " +
-                        "  from ods_db  " +
-                        "  where  alarm_level >  0  "
-        );
-
-        carTable.execute().print();
-        //写出到kafka
-        tEnv.executeSql("create table  Dwd_Malfunction_warn ( " +
-                " `vin` string ," +
-                " `timestamp` bigint ," +
-                " `car_status` int ," +
-                " `execution_mode` int ," +
-                " `velocity`  int ," +
-                " `mileage` int ," +
-                " `voltage` int ," +
-                " `electric_current` int ," +
-                " `soc` int ," +
-                " `dc_status int ," +
-                "  gear int ," +
-                "  insulation_resistance int ," +
-                "  motor_count int ," +
-                "  motor_list  ARRAY<ROW<id INT, status INT, controller_temperature INT, rev INT, torque INT, temperature INT, voltage INT, electric_current INT>> ," +
-                "  fuel_cell_voltage  int ," +
-                "  fuel_cell_current  int ," +
-                "  fuel_cell_consume_rate  int ," +
-                "  fuel_cell_temperature_probe_count  int ," +
-                "  fuel_cell_temperature  int ," +
-                "  fuel_cell_max_temperature  int ," +
-                "  fuel_cell_max_temperature_probe_id  int ," +
-                "  fuel_cell_max_hydrogen_consistency  int ," +
-                "  fuel_cell_max_hydrogen_consistency_probe_id  int ," +
-                "  fuel_cell_max_hydrogen_pressure  int ," +
-                "  fuel_cell_max_hydrogen_pressure_probe_id  int ," +
-                "  fuel_cell_dc_status  int ," +
-                "  engine_status  int ," +
-                "  crankshaft_speed  int ," +
-                "  fuel_consume_rate  int ," +
-                "  alarm_level  int ," +
-                "  alarm_sign  int ," +
-                "  custom_battery_alarm_count  int , " +
-                "  custom_battery_alarm_list  array<int> ," +
-                "  custom_motor_alarm_count int ," +
-                "  custom_motor_alarm_list array<int> ," +
-                "  custom_engine_alarm_count int ," +
-                "  custom_engine_alarm_list array<int> ," +
-                "  other_alarm_count  int ," +
-                "  other_alarm_list  array<int> ," +
-                "  battery_count  int ," +
-                "  battery_pack_count  int ," +
-                "  battery_voltages  array<int> ," +
-                "  battery_temperature_probe_count  int ," +
-                "  battery_pack_temperature_count  int ," +
-                "  battery_temperatures  array<int> ," +
-                "  max_voltage_battery_pack_id  int ," +
-                "  max_voltage_battery_id  int ," +
-                "  max_voltage  int ," +
-                "  min_voltage_battery_pack_id  int ," +
-                "  min_voltage_battery_id  int ," +
-                "  min_voltage  int ," +
-                "  max_temperature_subsystem_id  int ," +
-                "  max_temperature_probe_id  int ," +
-                "  max_temperature  int ," +
-                "  min_temperature_subsystem_id  int ," +
-                "  min_temperature_probe_id  int ," +
-                "  min_temperature  int  " +
-                " )" + FlinkSinkUtil.getKafkaSink("Dwd_Malfunction_warn")) ;
-
-        carTable.executeInsert("Dwd_Malfunction_warn");
-
-
-
-
-    }
-}
Index: car2023-realtime/src/main/java/com/atguigu/util/FlinkSinkUtil.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/car2023-realtime/src/main/java/com/atguigu/util/FlinkSinkUtil.java b/car2023-realtime/src/main/java/com/atguigu/util/FlinkSinkUtil.java
new file mode 100644
--- /dev/null	(date 1690249065489)
+++ b/car2023-realtime/src/main/java/com/atguigu/util/FlinkSinkUtil.java	(date 1690249065489)
@@ -0,0 +1,7 @@
+package com.atguigu.util;
+
+public class FlinkSinkUtil {
+    public static String getKafkaSink(String dwdMalfunctionWarn) {
+        return
+    }
+}
Index: car2023-realtime/src/main/java/com/atguigu/util/DateFormatUtil.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/car2023-realtime/src/main/java/com/atguigu/util/DateFormatUtil.java b/car2023-realtime/src/main/java/com/atguigu/util/DateFormatUtil.java
new file mode 100644
--- /dev/null	(date 1690248960614)
+++ b/car2023-realtime/src/main/java/com/atguigu/util/DateFormatUtil.java	(date 1690248960614)
@@ -0,0 +1,68 @@
+package com.atguigu.util;
+
+import java.time.LocalDateTime;
+import java.time.ZoneId;
+import java.time.ZoneOffset;
+import java.time.format.DateTimeFormatter;
+import java.util.Date;
+
+public class DateFormatUtil {
+    private static final DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy-MM-dd");
+    private static final DateTimeFormatter dtfForPartition = DateTimeFormatter.ofPattern("yyyyMMdd");
+    private static final DateTimeFormatter dtfFull = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
+
+    /**
+     * 2023-07-05 01:01:01 转成 ms 值
+     * @param dateTime
+     * @return
+     */
+    public static Long dateTimeToTs(String dateTime) {
+        LocalDateTime localDateTime = LocalDateTime.parse(dateTime, dtfFull);
+        return localDateTime.toInstant(ZoneOffset.of("+8")).toEpochMilli();
+    }
+
+    /**
+     * 把毫秒值转成 年月日:  2023-07-05
+     * @param ts
+     * @return
+     */
+    public static String tsToDate(Long ts) {
+        Date dt = new Date(ts);
+        LocalDateTime localDateTime = LocalDateTime.ofInstant(dt.toInstant(), ZoneId.systemDefault());
+        return dtf.format(localDateTime);
+    }
+
+    /**
+     * 把毫秒值转成 年月日时分秒:  2023-07-05 01:01:01
+     * @param ts
+     * @return
+     */
+    public static String tsToDateTime(Long ts) {
+        Date dt = new Date(ts);
+        LocalDateTime localDateTime = LocalDateTime.ofInstant(dt.toInstant(), ZoneId.systemDefault());
+        return dtfFull.format(localDateTime);
+    }
+
+    public static String tsToDateForPartition(long ts) {
+        Date dt = new Date(ts);
+        LocalDateTime localDateTime = LocalDateTime.ofInstant(dt.toInstant(), ZoneId.systemDefault());
+        return dtfForPartition.format(localDateTime);
+    }
+
+    /**
+     * 把 年月日转成 ts
+     * @param date
+     * @return
+     */
+    public static long dateToTs(String date) {
+        return dateTimeToTs(date + " 00:00:00");
+    }
+
+    public static void main(String[] args) {
+        long ts = dateTimeToTs("2023-07-13 00:00:00");
+        long a = dateToTs("2023-07-11");
+
+        System.out.println((ts - a) / 1000 / 60 / 60 / 24);
+    }
+
+}
